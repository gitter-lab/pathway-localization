# This Snakefile is based on the Snakefile in databasePrediction. 
# It assumes tuning has already been performed, since it bases all models on the best-performing model from that experiment. 

NETWORKS=['topPathways']
TIMES = ['same','egf120','120']
FEATURES=['compartmentsNodes']
MODELS=['GATCONV']

rule make_pytorch_datasets:
    input:
        net="data/{networks}_{time}.txt",
        feat="data/{features}.tsv",
        timeData = "data/tmtLocs{time}hpi.csv"
    output:
        full="torchDatasets/{time}-{networks}-{features}.p"
    shell:
        "python prepCaseStudyData.py {input.net} {input.feat} {output.full} data/markerProteins.csv data/allUniprot.tsv half {input.timeData};"

#It doesn't matter which timepoint we use to make the tuning dataset
rule make_pytorch_val_datasets:
    input:
        netV="data/{networks}.txt_val",
        feat="data/{features}.tsv"
    output:
        val="torchDatasets/{networks}-{features}.p_val"
    shell:
        "python prepCaseStudyData.py {input.netV} {input.feat} {output.val} data/markerProteins.csv data/allUniprot.tsv folds data/tmtLocs120hpi.csv"


#Note: For the case study this rule does not actually run, since we're using the tuning results from the main experiment
rule tune_pytorch_params:
    input:
        "torchDatasets/{networks}-{features}.p_val"
    params:
        curModel = "{model}"
    output:
        "axRuns/{model}-{networks}-{features}.json"
    shell:
        "python tuneCaseStudy.py {params.curModel} {input} {output}"

rule pytorch_run:
    input:
        "axRuns/{model}-{networks}-{features}.json",
        "torchDatasets/{time}-{networks}-{features}.p"
    output:
        "runs/{time}-{model}-{networks}-{features}.p"
    shell:
        "python trainCaseStudy.py {input} {output}"

rule analyze_results:
    input:
        resFile = expand("runs/{time}-{model}-{networks}-{features}.p",time=TIMES, model=MODELS,networks=NETWORKS,features=FEATURES),
        full=expand("torchDatasets/{time}-{networks}-{features}.p",time=TIMES,networks=NETWORKS,features=FEATURES)
    output:
        "results/allRes.p"
    shell:
        "python combineAnalyzeRes.py {input.resFile}"

rule all:
    input:
        "results/allRes.p"

