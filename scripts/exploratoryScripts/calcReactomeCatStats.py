"""
Author: Chris Magnano
08/25/20

This script gets statistics about each group of pathways in reactome.

It expects the file of heirarchical pathway structures from https://reactome.org/download/current/ReactomePathwaysRelation.txt and the table of "top level" pathways in reactome found from https://reactome.org/content/schema/objects/TopLevelPathway?speciesTaxId=9606 (edited into a tsv table).
"""

from sys import argv
import pickle as pkl
import pandas as pd

def main():
    topLevels = dict()
    parentDict = dict()

    #Read top pathway names
    for line in open(argv[1]):
        lineList=line.strip().split()
        pathID = lineList[0].strip()
        pathName = " ".join(lineList[1:])
        topLevels[pathID] = pathName
        #allPaths[pathID] = dict()

    #Read pathway hierarchies file format is parent [tab] child
    dCount = 0
    for line in open(argv[2]):
        lineList = line.strip().split()
        if lineList[1] in parentDict:
            #print("WE GOT A DUPPY BOY:",lineList[1])
            dCount += 1
        parentDict[lineList[1]] = lineList[0]
    print("Number of pathways with multiple parents: ",dCount)

    #Load all reactome pathways
    pF = open("tmpReactComPPI2.pkl","rb") #This is the pkl file generated by compareReactomeComPPI.py
    allPaths = pkl.load(pF)
    pF.close()

    #Get names of 10 most comon locations
    allEdges = pd.concat(allPaths.values())
    popLoc = allEdges["LocationName"].value_counts(normalize=False).nlargest(10)
    popLoc = list(popLoc.index)

    #Construct pandas table with list of pathways, sizes, and categories
    data = []
    columns = ["Identifier","Category","Size"]+popLoc
    for name in allPaths:
        p = name.split(".")[0]
        hasParent = True
        parent = p
        while hasParent:
            if parent in parentDict:
                parent = parentDict[parent]
            else:
                assert(parent in topLevels)
                hasParent=False
        #Get popular locations distribution
        dist = dict()
        t=0.0
        for ind,row in allPaths[name].iterrows():
            l = row["LocationName"]
            if l in popLoc:
                t+=1
                if l not in dist:
                    dist[l]=1
                else:
                    dist[l]+=1
        distList = []
        for pLoc in popLoc:
            if pLoc in dist:
                distList.append(dist[pLoc]/t)
            else:
                distList.append(0)
        parents = [topLevels[parent]]*len(allPaths[name])
        allPaths[name]["Category"]=parents
        data.append([name,topLevels[parent],len(allPaths[name])]+distList)
    pathsCats = pd.DataFrame(data=data, columns=columns)
    pathCatsDev = pathsCats[pathsCats["Category"] == "Developmental Biology"]
    pathCatsDev.to_csv("allDevPaths.txt", index=False, sep="\t", columns=["Identifier"])
    #print(pathsCats)
    #print("Mean Category Sizes:")
    #print(pathsCats.groupby("Category").mean())
    #print(pathsCats["Category"].value_counts())
    #pathsCats.groupby("Category").mean().to_csv("catTable.csv")
    #print(pathsCats.groupby("Category").median())





    return
main()
